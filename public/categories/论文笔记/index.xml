<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>论文笔记 on 刘畅的博客</title>
    <link>http://localhost:1313/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 论文笔记 on 刘畅的博客</description>
    <generator>Hugo</generator>
    <language>ch</language>
    <lastBuildDate>Mon, 12 Oct 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spanner: Google&#39;s Globally Distributed Database, Google, 2012</title>
      <link>http://localhost:1313/post/spanner-googles-globally-distributed-database/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/spanner-googles-globally-distributed-database/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/spanner.pdf&#34;&gt;Spanner: Google’s Globally-Distributed Database&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;特性&#34;&gt;特性&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;external consistency:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;if a transaction $T_1$ commits before another transaction $T_2$ starts, then $T_1$&amp;rsquo;s commit timestamp is smaller than $T_2$&amp;rsquo;s.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果事务 $T_1$ 的提交先于事务 $T_2$ 的开始，那么 $T_1$ 的提交时间戳应该小于 $T2$ 的提交时间戳。$T_2$ 可以读到所有 $T_1$ 产生的写操作。&lt;/p&gt;&#xA;&lt;h1 id=&#34;架构&#34;&gt;架构&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/image/Spanner-Googles-Globally-Distributed-Database/Figure1.jpg&#34;&#xA;    alt=&#34;图1.&#34; width=&#34;70%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;图1.&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Universe&lt;/strong&gt;：一个完整的Spanner部署，目前只有test/playground，development/production，production-only三个Universe。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;universemaster&lt;/strong&gt;：提供console做universe内的各个Zone监控，debug等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;placement driver&lt;/strong&gt;：定时的检查数据，按需进行数据迁移，满足副本的限制或保证负载均衡。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Zone&lt;/strong&gt;：对应用户的一个应用级别部署。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;zonemaster&lt;/strong&gt;：每个zone只有一个，分配数据。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;location proxy&lt;/strong&gt;：用于定位data所在spanserver&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;span server&lt;/strong&gt;：数据所在服务器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/image/Spanner-Googles-Globally-Distributed-Database/Figure2.jpg&#34;&#xA;    alt=&#34;图2.&#34; width=&#34;70%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;图2.&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/image/Spanner-Googles-Globally-Distributed-Database/hierarchy.png&#34;&#xA;    alt=&#34;图3.&#34; width=&#34;80%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;图3.&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;读写事务&#34;&gt;读写事务&lt;/h1&gt;&#xA;&lt;h1 id=&#34;只读事务&#34;&gt;只读事务&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Time, Clocks, and the Ordering of Events in a Distributed System, Lamport, 1978</title>
      <link>http://localhost:1313/post/time-clocks-and-the-ordering-of-events-in-a-distributed-system/</link>
      <pubDate>Tue, 06 Oct 2020 10:02:07 +0800</pubDate>
      <guid>http://localhost:1313/post/time-clocks-and-the-ordering-of-events-in-a-distributed-system/</guid>
      <description>&lt;p&gt;本篇总结学习了1978年&lt;a href=&#34;https://en.wikipedia.org/wiki/Leslie_Lamport&#34;&gt;Leslie Lamport&lt;/a&gt;发表在 &lt;em&gt;Communications of the ACM&lt;/em&gt; 上的论文 &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Time, Clocks, and the Ordering of Events in a Distributed System&lt;/a&gt;。论文对分布式系统中的时间，时钟等概念做了深入的讨论，提出了“Happened Before”，“逻辑时钟”，“物理时钟”，“State Machine”等重要概念与算法，是分布式领域不能不读的经典论文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>A New Solution of Dijkstra&#39;s Concurrent Programming Problem, Lamport, 1974</title>
      <link>http://localhost:1313/post/a-new-solution-of-dijkstras-concurrent-programming-problem/</link>
      <pubDate>Sat, 05 Sep 2020 18:40:23 +0800</pubDate>
      <guid>http://localhost:1313/post/a-new-solution-of-dijkstras-concurrent-programming-problem/</guid>
      <description>&lt;p&gt;在之前的&lt;a href=&#34;http://www.changliu.me/post/solution-of-a-problem-in-concurrent-programming-control/&#34;&gt;文章&lt;/a&gt;中提到过Dijkstra于1965年提出的基于共享存储的临界区互斥访问问题。Dijkstra提出了基于对内存单元的原子性读写实现的方案。&#xA;然而，Lamport指出Dijkstra的方案会因为节点在临界区内失效而导致系统死锁。在其于1974年发表的文章&lt;a href=&#34;https://lamport.azurewebsites.net/pubs/bakery.pdf&#34;&gt;A New Solution of Dijkstra&amp;rsquo;s Concurrent Programming Problem&lt;/a&gt;中，Lamport提出了完全基于软件实现的解决方案，被称为“面包店算法”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solution of a Problem in Concurrent Programming Control, Dijkstra, 1965</title>
      <link>http://localhost:1313/post/solution-of-a-problem-in-concurrent-programming-control/</link>
      <pubDate>Thu, 03 Sep 2020 19:48:34 +0800</pubDate>
      <guid>http://localhost:1313/post/solution-of-a-problem-in-concurrent-programming-control/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&#34;&gt;Edsger W. Dijkstra&lt;/a&gt;于1965年发表文章&lt;a href=&#34;https://www.di.ens.fr/~pouzet/cours/systeme/bib/dijkstra.pdf&#34;&gt;Solution of a Problem in Concurrent Programming Control&lt;/a&gt;，引出并发系统下的互斥(mutual exclusion)问题，自此开辟了分布式计算领域。Dijkstra在文中给出了基于共享存储原子性访问的解决方案只有十多行代码，但阅读起来较难以理解。在查阅若干资料后，总结了一种较为直观的解释方法，记录于此。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
