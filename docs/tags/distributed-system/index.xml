<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed System on 刘畅的博客</title>
    <link>http://changliu0828.github.io/tags/distributed-system/</link>
    <description>Recent content in Distributed System on 刘畅的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Oct 2020 10:02:07 +0800</lastBuildDate>
    
	<atom:link href="http://changliu0828.github.io/tags/distributed-system/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Time, Clocks, and the Ordering of Events in a Distributed System, Lamport, 1978</title>
      <link>http://changliu0828.github.io/post/time-clocks-and-the-ordering-of-events-in-a-distributed-system/</link>
      <pubDate>Tue, 06 Oct 2020 10:02:07 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/time-clocks-and-the-ordering-of-events-in-a-distributed-system/</guid>
      <description>&lt;p&gt;本篇总结学习了1978年&lt;a href=&#34;https://en.wikipedia.org/wiki/Leslie_Lamport&#34;&gt;Leslie Lamport&lt;/a&gt;发表在 &lt;em&gt;Communications of the ACM&lt;/em&gt; 上的论文 &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Time, Clocks, and the Ordering of Events in a Distributed System&lt;/a&gt;。论文对分布式系统中的时间，时钟等概念做了深入的讨论，提出了“Happened Before”，“逻辑时钟”，“物理时钟”，“State Machine”等重要概念与算法，是分布式领域不能不读的经典论文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A New Solution of Dijkstra&#39;s Concurrent Programming Problem, Lamport, 1974</title>
      <link>http://changliu0828.github.io/post/a-new-solution-of-dijkstras-concurrent-programming-problem/</link>
      <pubDate>Sat, 05 Sep 2020 18:40:23 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/a-new-solution-of-dijkstras-concurrent-programming-problem/</guid>
      <description>&lt;p&gt;在之前的&lt;a href=&#34;http://www.changliu.me/post/solution-of-a-problem-in-concurrent-programming-control/&#34;&gt;文章&lt;/a&gt;中提到过Dijkstra于1965年提出的基于共享存储的临界区互斥访问问题。Dijkstra提出了基于对内存单元的原子性读写实现的方案。
然而，Lamport指出Dijkstra的方案会因为节点在临界区内失效而导致系统死锁。在其于1974年发表的文章&lt;a href=&#34;https://lamport.azurewebsites.net/pubs/bakery.pdf&#34;&gt;A New Solution of Dijkstra&amp;rsquo;s Concurrent Programming Problem&lt;/a&gt;中，Lamport提出了完全基于软件实现的解决方案，被称为“面包店算法”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solution of a Problem in Concurrent Programming Control, Dijkstra, 1965</title>
      <link>http://changliu0828.github.io/post/solution-of-a-problem-in-concurrent-programming-control/</link>
      <pubDate>Thu, 03 Sep 2020 19:48:34 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/solution-of-a-problem-in-concurrent-programming-control/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&#34;&gt;Edsger W. Dijkstra&lt;/a&gt;于1965年发表文章&lt;a href=&#34;https://www.di.ens.fr/~pouzet/cours/systeme/bib/dijkstra.pdf&#34;&gt;Solution of a Problem in Concurrent Programming Control&lt;/a&gt;，引出并发系统下的互斥(mutual exclusion)问题，自此开辟了分布式计算领域。Dijkstra在文中给出了基于共享存储原子性访问的解决方案只有十多行代码，但阅读起来较难以理解。在查阅若干资料后，总结了一种较为直观的解释方法，记录于此。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>