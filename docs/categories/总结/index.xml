<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>总结 on Chang Liu&#39;s Blog</title>
    <link>http://changliu0828.github.io/categories/%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 总结 on Chang Liu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://changliu0828.github.io/categories/%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>c&#43;&#43;11特性简介</title>
      <link>http://changliu0828.github.io/post/2020/08/28/c-11%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://changliu0828.github.io/post/2020/08/28/c-11%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</guid>
      <description>C++自1985年发行以来成为了世界上最成功的的编程语言之一。本文总结了C++11引入的部分重要特性，并逐一举例说明。完整特性与编译器支持请参考这里$^{[1]}$。
部分特性与示例 1. 右值引用(rvalue references) 在C语言中，左值与右值原是即为简单的概念。凡是既可以出现在赋值语句两边的称为左值，只能出现在赋值语句右边的称为右值。例如下面的代码中，a和b是左值，42和a + b是右值。如果右值出现在赋值语句左边，则会产生一个编译错误。
int a = 42; int b = a; 42 = a + b; //compile error a + b = a; //compile error 另一种说法是，左值是哪些能被&amp;amp;操作符取到地址的值，右值是通过左值运算得出的临时结果或一些字面常量。把上面的代码编译成汇编语言就一目了然了，下面的代码中左值a和b都在栈上分配了空间，分别是-4(%rbp)和-8(%rbp)，而右值42只是一个立即数，a + b则是addl的两个参数。
movl $42, -4(%rbp) ;int a = 42; movl -4(%rbp), %eax movl %eax, -8(%rbp) movl -8(%rbp), %eax ;int b = a addl %eax, -4(rbp); ;a = a + b 使用引用是提高程序运行效率的常用手段，而在只提供左值引用的C++03时代，在某些场景下的引用并没有那么“好用”。下面的代码中，由于无法传递右值Data()的引用，我们不得不使用3行丑陋的代码来完成一个简单的工作。
extern Data Merge(Data&amp;amp; data1, Data&amp;amp; data2); //compile error Data double_data = Merge(Data(), Data()); //ok, but ugly Data data1; Data data2; Data double_data = Merge(data1, data2); C++中，提供了右值引用操作符&amp;amp;&amp;amp;，于是我们增加支持右值引用的Merge，代码可以简化成，</description>
    </item>
    
  </channel>
</rss>