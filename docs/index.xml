<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 刘畅的博客</title>
    <link>http://changliu0828.github.io/</link>
    <description>Recent content in Home on 刘畅的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Oct 2020 14:34:06 +0800</lastBuildDate>
    
	<atom:link href="http://changliu0828.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式事务与两阶段提交</title>
      <link>http://changliu0828.github.io/post/2pc/</link>
      <pubDate>Wed, 21 Oct 2020 14:34:06 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/2pc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time, Clocks, and the Ordering of Events in a Distributed System, Lamport, 1978</title>
      <link>http://changliu0828.github.io/post/time-clocks-and-the-ordering-of-events-in-a-distributed-system/</link>
      <pubDate>Tue, 06 Oct 2020 10:02:07 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/time-clocks-and-the-ordering-of-events-in-a-distributed-system/</guid>
      <description>&lt;p&gt;本篇文章总结学习了Lamport于1978年发表在 &lt;em&gt;Communications of the ACM&lt;/em&gt; 上的论文 &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Time, Clocks, and the Ordering of Events in a Distributed System&lt;/a&gt;，文章对分布式系统中的时间，时钟等概念做了深入的讨论，提出了“Happened Before”，“逻辑时钟”，“物理时钟”，“State Machine”等重要概念与算法，是分布式领域不能不读的经典论文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libco源码笔记(3)自动切换</title>
      <link>http://changliu0828.github.io/post/libco-auto/</link>
      <pubDate>Wed, 23 Sep 2020 16:28:30 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/libco-auto/</guid>
      <description>&lt;p&gt;在之前的文章&lt;a href=&#34;http://www.changliu.me/post/libco-manual/&#34;&gt;libco源码笔记(2)显示切换&lt;/a&gt;中，我们介绍了libco提供的显示协程切换接口，并讨论了协程池的使用。本文讨论libco提供的自动切换相关函数接口。建议配合我自己的&lt;a href=&#34;https://github.com/changliu0828/libco&#34;&gt;注释版本&lt;/a&gt;阅读本文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libco源码笔记(2)显式切换</title>
      <link>http://changliu0828.github.io/post/libco-manual/</link>
      <pubDate>Tue, 22 Sep 2020 16:18:17 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/libco-manual/</guid>
      <description>&lt;p&gt;在之前的文章&lt;a href=&#34;http://www.changliu.me/post/libco-coroutine/&#34;&gt;libco源码笔记(1)协程与上下文切换&lt;/a&gt;中，我们介绍了协程的基本概念以及libco中的上下文切换核心代码。本文libco提供的显式切换相关函数接口，与此相对的通过hook系统调用提供的自动切换机制在后续文章中介绍。建议配合我自己的&lt;a href=&#34;https://github.com/changliu0828/libco&#34;&gt;注释版本&lt;/a&gt;阅读本文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libco源码笔记(1)协程与上下文切换</title>
      <link>http://changliu0828.github.io/post/libco-coroutine/</link>
      <pubDate>Fri, 11 Sep 2020 15:08:21 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/libco-coroutine/</guid>
      <description>&lt;p&gt;本文结合微信高性能开源协程库&lt;a href=&#34;https://github.com/Tencent/libco&#34;&gt;libco&lt;/a&gt;，总结了协程相关的问题与解决方案。libco源码注释不多，这里附上我自己的&lt;a href=&#34;https://github.com/changliu0828/libco&#34;&gt;注释版本&lt;/a&gt;，建议配合阅读。此外，文中的代码及解释均运行于x86-32位下，64位下的情况略有不同，篇幅有限不再赘述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A New Solution of Dijkstra&#39;s Concurrent Programming Problem, Lamport, 1974</title>
      <link>http://changliu0828.github.io/post/a-new-solution-of-dijkstras-concurrent-programming-problem/</link>
      <pubDate>Sat, 05 Sep 2020 18:40:23 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/a-new-solution-of-dijkstras-concurrent-programming-problem/</guid>
      <description>&lt;p&gt;在之前的&lt;a href=&#34;http://www.changliu.me/post/solution-of-a-problem-in-concurrent-programming-control/&#34;&gt;文章&lt;/a&gt;中提到过Dijkstra于1965年提出的基于共享存储的临界区互斥访问问题。Dijkstra提出了基于对内存单元的原子性读写实现的方案。
然而，Lamport指出Dijkstra的方案会因为节点在临界区内失效而导致系统死锁。在其于1974年发表的文章&lt;a href=&#34;https://lamport.azurewebsites.net/pubs/bakery.pdf&#34;&gt;A New Solution of Dijkstra&amp;rsquo;s Concurrent Programming Problem&lt;/a&gt;中，Lamport提出了完全基于软件实现的解决方案，被称为“面包店算法”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Solution of a Problem in Concurrent Programming Control, Dijkstra, 1965</title>
      <link>http://changliu0828.github.io/post/solution-of-a-problem-in-concurrent-programming-control/</link>
      <pubDate>Thu, 03 Sep 2020 19:48:34 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/solution-of-a-problem-in-concurrent-programming-control/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&#34;&gt;Edsger W. Dijkstra&lt;/a&gt;于1965年发表文章&lt;a href=&#34;https://www.di.ens.fr/~pouzet/cours/systeme/bib/dijkstra.pdf&#34;&gt;Solution of a Problem in Concurrent Programming Control&lt;/a&gt;，引出并发系统下的互斥(mutual exclusion)问题，自此开辟了分布式计算领域。Dijkstra在文中给出了基于共享存储原子性访问的解决方案只有十多行代码，但阅读起来较难以理解。在查阅若干资料后，总结了一种较为直观的解释方法，记录于此。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>c&#43;&#43;11特性简介</title>
      <link>http://changliu0828.github.io/post/cpp11-features/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://changliu0828.github.io/post/cpp11-features/</guid>
      <description>&lt;p&gt;c++自1985年发行以来，以其高效、灵活的特性成为最成功的高级编程语言之一。2011年，距离上一个c++标准c++03发布的8年后，c++委员会吸取了现代编程语言的若干特性，发布了新的c++11标准，使得古朴的c++得以跻身现代编程语言的行列。本文挑选了部分c++11引入的新特性进行说明，阐述其缘由，使用以及注意事项。如果你需要查看完整特性与编译器支持请参考&lt;a href=&#34;https://en.cppreference.com/w/cpp/compiler_support&#34;&gt;这里$^{[1]}$&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>根据在线时间推荐好友</title>
      <link>http://changliu0828.github.io/post/friend-recommendation/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://changliu0828.github.io/post/friend-recommendation/</guid>
      <description>&lt;p&gt;玩过类似魔兽世界这种网游的朋友，应该都有组团刷副本的经历。然而有些时候我们会发现，虽然加了很多游戏好友，但自己想刷副本时经常会缺“奶”，缺“T”。能不能根据玩家在线的时间段偏好推荐相似的好友呢？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>