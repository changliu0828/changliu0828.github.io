<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chang Liu&#39;s Blog</title>
    <link>http://changliu0828.github.io/post/</link>
    <description>Recent content in Posts on Chang Liu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Sep 2020 19:48:34 +0800</lastBuildDate>
    
	<atom:link href="http://changliu0828.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[PaperNote]Solution of a Problem in Concurrent Programming Control, Dijkstra, 1965</title>
      <link>http://changliu0828.github.io/post/2020/09/03/papernotesolution-of-a-problem-in-concurrent-programming-control-dijkstra-1965/</link>
      <pubDate>Thu, 03 Sep 2020 19:48:34 +0800</pubDate>
      
      <guid>http://changliu0828.github.io/post/2020/09/03/papernotesolution-of-a-problem-in-concurrent-programming-control-dijkstra-1965/</guid>
      <description>Edsger W. Dijkstra于1965年发表文章Solution of a Problem in Concurrent Programming Control，引出并发系统下的互斥(mutual exclusion)问题，自此开辟了分布式计算领域。Dijkstra在文中给出了基于共享存储原子性访问的解决方案只有十多行代码，但阅读起来较难以理解。在查阅若干资料后，总结了一种较为直观的解释方法，记录于此。
问题 考虑N个节点(进程)，每个都在运行一个无限循环的程序。每轮循环当中都存在一个临界区(critical section)。我们需要设计算法控制多个计算机中，同时只有一台可以进入其临界区，并需要满足下列条件，
 所有的节点是对称(symmetrical)的，即我们不能引入类似于“1号节点优先于2号节点”的静态优先级配置。 各个节点的运行速度可能不同，同一个节点在不同时刻的运行速度也可能不同。 任意节点在临界区外停止运行，不应引起系统的死锁。 如果多个节点想要访问临界区，必须在有限时间内决策出哪个节点优先访问。  各个节点之间可以通过共享存储(common store)通信，共享存储提供以字(word)为单位的原子性读写。
当今现在，在基于共享内存通信的单机多进程上，我们可以很方便的使用基于TAS(Test&amp;amp;Set)或的CAS(Copy&amp;amp;Swap)实现的互斥锁mutex来实现临界区互斥访问。然而，在只有对内存单元原子读写的条件下，如何完成互斥访问呢？Dijkstra给出了他的解法。
解法与证明 在共享存储上，Dijkstra使用了两个长度为N的布尔数组，和一个整数。
Boolean array b, c[1:N]; integer K 其中，$k$ 满足 $1 \leqslant k \leqslant N$，$b[i]$ 和 $c[i]$ 只被节点 $i$ 修改，且初始值为true。对于第 $i$ 个节点$(1 \leqslant i \leqslant N)$，执行下面的代码
integer j Li0: b[i] := false Li1: if k != i then Li2: begin c[i] := true Li3: if b[k] then k := i go to Li1 end else Li4: begin c[i] := false for j := 1 step 1 until N do if j !</description>
    </item>
    
    <item>
      <title>c&#43;&#43;11特性简介</title>
      <link>http://changliu0828.github.io/post/2020/08/28/c-11%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://changliu0828.github.io/post/2020/08/28/c-11%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</guid>
      <description>c++自1985年发行以来，以其高效、灵活的特性成为最成功的高级编程语言之一。2011年，距离上一个c++标准c++03发布的8年后，c++委员会吸取了现代编程语言的若干特性，发布了新的c++11标准，使得古朴的c++得以跻身现代编程语言的行列。本文挑选了部分c++11引入的新特性进行说明，阐述其缘由，使用以及注意事项。如果你需要查看完整特性与编译器支持请参考这里$^{[1]}$。
部分特性与示例 1. 右值引用(rvalue references) 在C语言中，左值与右值原是极为简单的概念——凡是既可以出现在赋值语句两边的称为左值，只能出现在赋值语句右边的称为右值。例如下面的代码中，a和b是左值，42和a + b是右值。如果右值出现在赋值语句左边，则会如你所熟知的一样，产生一个编译错误。
int a = 42; int b = a; 42 = a + b; //compile error a + b = a; //compile error 另一种区分左值与右值的方法是，左值是哪些能被&amp;amp;操作符取到地址的值，右值是通过左值运算得出的临时结果或一些字面常量。把上面的代码编译成汇编语言就一目了然了。下面的代码中左值a和b都在栈上分配了空间，分别是-4(%rbp)和-8(%rbp)，而右值42是一个立即数，a + b则是addl的两个参数。
movl $42, -4(%rbp) ;int a = 42; movl -4(%rbp), %eax movl %eax, -8(%rbp) movl -8(%rbp), %eax ;int b = a addl %eax, -4(rbp); ;a = a + b 谈过了“右值”，我们来讨论下”引用“。使用引用是提高程序运行效率的常用手段，而在只提供左值引用的C++03时代，在某些场景下的引用并没有那么“好用”。例如下面的代码中，由于无法传递右值Data()的引用，我们不得不使用3行丑陋的代码来完成一个简单的工作。
extern Data Merge(Data&amp;amp; data1, Data&amp;amp; data2); Data double_data = Merge(Data(), Data()); //compile error //ok, but ugly Data data1; Data data2; Data double_data = Merge(data1, data2); 为此，C++中，提供了右值引用操作符&amp;amp;&amp;amp;。于是我们保留原先的左值引用版Merge，增加支持右值引用的Merge，代码可以简化成，</description>
    </item>
    
    <item>
      <title>根据在线时间推荐好友</title>
      <link>http://changliu0828.github.io/post/2019/02/14/%E6%A0%B9%E6%8D%AE%E5%9C%A8%E7%BA%BF%E6%97%B6%E9%97%B4%E6%8E%A8%E8%8D%90%E5%A5%BD%E5%8F%8B/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://changliu0828.github.io/post/2019/02/14/%E6%A0%B9%E6%8D%AE%E5%9C%A8%E7%BA%BF%E6%97%B6%E9%97%B4%E6%8E%A8%E8%8D%90%E5%A5%BD%E5%8F%8B/</guid>
      <description>玩过类似魔兽世界这种网游的朋友，应该都有组团刷副本的经历。然而有些时候我们会发现，虽然加了很多游戏好友，但自己想刷副本时经常会缺“奶”，缺“T”。能不能根据玩家在线的时间段推荐相似的好友呢？
思考 推荐的本质是排序。给用户推荐用户，就是要找到一个相似度评估函数来衡量两个用户的在线时间段是否相似。然后把目标玩家与所有玩家的相似度一一计算，并按序推荐。
在介绍我的做法前，列三个遇到的问题：
 如何表示每个玩家的在线习惯，新玩家怎么办？ 如何设计相似度评估函数？ 系统如何支持千万以上量级的玩家？  如果是你，如何解决上面的问题。
我的做法 在线向量 使用一个24维向量描述用户24个小时的在线习惯，每一维表示玩家在此时刻内在线的期望，称为在线向量。
如下图，假设我们有一个玩家A，他某天在12:00到13:00之间上线了一会，晚上在20点过也上线了一会。
我们如果粗略的认为A在12:00-13:00，20:00-21:00之间和的在线概率为1，就得到了下图中的在线向量。
如果从长期来看，将一段时间内每天的时间向量取平均值，就得到了这段时间的平均向量。下图中的绿色方框是玩家A经过四天的观察得到的在线向量，即
$$ V_A = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0.25, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0) $$
使用在线向量，我们可以粗略刻画玩家在某个时间点在线的期望。此外，在线向量的norm也在一定程度上刻画了用户的活跃情况，对于频繁上线的用户，其在线向量的norm会大于不常上线的用户。我们可以利用这点，尽量给推荐更加活跃的用户作为好友。
在线相似度 对于两个用户之间的在线相似度，我们使用两人的在线向量的內积表示。这个內积可以理解为两个玩家在一天中“相遇”的期望。
$$ S_{AB} = V_A \cdot V_B $$
假设我们有3个用户，
$$ \begin{aligned} V_A &amp;amp; = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.</description>
    </item>
    
  </channel>
</rss>